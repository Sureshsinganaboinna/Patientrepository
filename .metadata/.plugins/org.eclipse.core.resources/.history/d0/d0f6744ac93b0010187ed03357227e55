package com.amazon.backend.service;

import java.util.List;

import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import java.util.Optional;


import com.amazon.backend.GlobalException.EmptyProductsInCart;
import com.amazon.backend.constant.CartConstants;
import com.amazon.backend.dto.CartItemDto;
import com.amazon.backend.entities.Cart;
import com.amazon.backend.entities.CartItems;
import com.amazon.backend.entities.Productss;
import com.amazon.backend.pojo.CartAdding;
import com.amazon.backend.pojo.UpdateQuantity;
import com.amazon.backend.repository.CartItemsRepository;
import com.amazon.backend.repository.CartRepository;



@Service
public class CartService {

	@Autowired
	private CartRepository cartRepository;

	@Autowired
	private CartItemsRepository cartItemsRepository;
	
	@Autowired
    private JavaMailSender javaMailSender;

	public List<Productss> AddingItemsToCard(CartAdding cartAdding) {
		System.out.println(cartAdding.getUserId());
		Optional<Cart> sss = cartRepository.findByUserId(cartAdding.getUserId());

		if (sss.isEmpty()) {
			Cart cart = new Cart();
			cart.setUserId(cartAdding.getUserId());

			Cart cart2 = cartRepository.save(cart);

			CartItems cartItems = new CartItems();
			cartItems.setCartId(cart2.getCartId());
			cartItems.setProductId(cartAdding.getProductId());
			cartItems.setQuantity(cartAdding.getQuantity());

			CartItems cartItems2 = cartItemsRepository.save(cartItems);
			List<Productss> listofproducts1 = cartItemsRepository
					.getListOfItemsAfterAddedToCart(cartItems2.getCartId());
			return listofproducts1;

		}

		else {
			Cart cartdb = sss.get();
			CartItems cartItems = new CartItems();
			cartItems.setCartId(cartdb.getCartId());
			cartItems.setProductId(cartAdding.getProductId());
			cartItems.setQuantity(cartAdding.getQuantity());

			CartItems cartItems1 = cartItemsRepository.save(cartItems);
			List<Productss> listofproducts = cartItemsRepository.getListOfItemsAfterAddedToCart(cartItems1.getCartId());
			return listofproducts;
		}

	}
	
	@Transactional
	public List<Productss> getProducts(int userId) {
		// List<Productss> getProductssFromDb =
		// cartRepository.getListOfProducts(userId);
		List<Productss> getProductssFromDb = cartRepository.getListOfProducts(userId);

		if (getProductssFromDb.isEmpty()) {
			throw new EmptyProductsInCart(CartConstants.EMPTY_PRODUCTS_IN_CART);
		}

		return getProductssFromDb;

	}

	public void updateQuantity(int cartItemId, UpdateQuantity updateQuantity) {
		Optional<CartItems> cartItemIddata = cartItemsRepository.findById(cartItemId);

		
		CartItems cartItems = cartItemIddata.get();

		cartItems.setQuantity(updateQuantity.getQuantity());

		cartItemsRepository.save(cartItems);

	}
	
	public CartItemDto updateQuantityProducts(CartAdding cartAdding)

	{
		Optional<Cart> cartData = cartRepository.findByUserId(cartAdding.getUserId());
		System.out.println(cartData.get());
		  Object updateData = cartRepository.updateProductQuantity(cartAdding.getQuantity(), cartData.get().getCartId(),
				cartAdding.getProductId());
		  
		  Object[] castObjects = (Object[]) updateData;
		  
		 CartItemDto cartItemDto = new CartItemDto( (Integer) castObjects[0] , (Integer) castObjects[1], (Integer) castObjects[2]);
		 
		 return cartItemDto;
	

	}
	
	public void deleteItemFromCart(int cartItemId) {
		cartItemsRepository.deleteById(cartItemId);

	}
	/*
    @Scheduled(fixedRate = 60000)
    @Transactional
	public void sendEmailReminderToUserWhoAreAddedToCart()
	{
	        List<Object[]> datadb	= cartItemsRepository.getUserInfoForRemindingEmailNotifications();
	        
	        for(Object[] row : datadb)
	        {
	        	System.out.println(row[0]);
	        	System.out.println(row[2]);
	        	
	        }
	}
	*/
	
    @Scheduled(fixedRate = 60000) // runs every day at 9 PM IST
    @Transactional
    public void sendEmailReminderToUserWhoAreAddedToCart1() {
        List<Object[]> datadb = cartItemsRepository.getUserInfoForRemindingEmailNotifications();

        for (Object[] row : datadb) {
            String firstName = (String) row[0]; // Assuming 1st column is first name
            String lastName = (String) row[1];  // Assuming 2nd column is last name
            String email = (String) row[2];     // Assuming 3rd column is email

            // Construct the email content
            String subject = "Reminder: You have items in your cart!";
            String message = "Dear " + firstName + " " + lastName + ",\n\n" +
                    "You have some amazing products waiting in your cart.\n" +
                    "Don't miss out! Complete your purchase now.\n\n" +
                    "Best regards,\nAmazon Team";

            // Send the email
            sendEmail(email, subject, message);
        }
    }

    private void sendEmail(String to, String subject, String body) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setTo(to);
            message.setSubject(subject);
            message.setText(body);
            javaMailSender.send(message);
            System.out.println("Email sent to: " + to);
        } catch (Exception e) {
            System.err.println("Failed to send email to: " + to);
            e.printStackTrace();
        }
    }
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}
